// automatically generated by Xtext
grammar dk.itu.chomsky.configurator.ConfigDSL with org.eclipse.xtext.common.Terminals

import "http://www.example.org/dk.itu.chomsky.configurator.model"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	"model" name=ID label=STRING "{"
		("types" "{"
			(types+=EnumType)*
		"}")?
		(children+=ModelChild)*
	"}"
;

EnumType:
	name=ID label=STRING "{"
		(values+=EnumVal)*
	"}"
;

EnumVal:
	name=ID label=STRING
;

ModelChild:
	Product | ProductGroup
;

ProductGroup:
	"group" label=STRING "{"
		(children+=ModelChild)*
	"}"
;

Product:
	"product" name=ID label=STRING "{"
		(children+=ProductChild)*
		("constraints" "{"
			(constraints+=Constraint)*
		"}")?
	"}"
;

ProductChild:
	Param | ParamGroup
;

ParamGroup:
	"group" label=STRING "{"
		(children+=ProductChild)*
	"}"
;

Param:
	PrimParam | EnumParam
;

PrimParam:
	"param" name=ID label=STRING type=PrimitiveType (optional?="optional")?
;

EnumParam:
	"param" name=ID label=STRING type=[EnumType] (optional?= "optional")?
;

enum PrimitiveType:
	IntTy = "Int" |
	BoolTy = "Bool" |
	DoubleTy = "Double" |
	TextTy = "Text"
;

Constraint:
	"constraint" label=STRING expr=Expr
;


ConstString:
	value=STRING
;


ConstNum:
	value=NUM
;

FunApp:
	name=ID "(" args+=Expr? ("," args+=Expr)*")"
;


Var returns Expr:
	ParamValueRef | FunApp | ValueRef
;

ValueRef:
	enumVal=[EnumVal]
;

ParamValueRef:
	"value" "(" param=[Param] ")"
;


ConstBool:
	value=BOOL
;

BOOL returns ecore::EBoolean:
	"false" | "true"
;

NUM returns ecore::EDouble:
	INT ("." INT)?
;

ITE:
  "if" guard=Expr "then" trueBranch=Expr "else" falseBranch=Expr
;

Expr:
	Comparison ({And.left=current} "&&" right=Comparison | {Or.left=current} right=Comparison)*
;

Comparison returns Expr:
	Equals ({Lt.left=current} "<" right=Equals |
			{Leq.left=current} "<=" right=Equals |
			{Gt.left=current} ">" right=Equals |
			{Geq.left=current} ">=" right=Equals
	)?
;

Equals returns Expr:
	Term ({Eq.left=current} "==" right=Term)?
;

Term returns Expr:
	Factor ({Plus.left=current} "+" right=Factor |
		    {Minus.left=current} "-" right=Factor
	)*
;

Factor returns Expr:
	Prefixed ({Mult.left=current} "*" right=Prefixed |
		      {Div.left=current}  "/" right=Prefixed		  
	)*
;

Prefixed returns Expr:
	{Not} "!" expr=Prim | Prim
;

Prim returns Expr:
	"(" Expr ")" | ITE | ConstNum | ConstBool | ConstString | Var	
;

