// automatically generated by Xtext
grammar dk.itu.chomsky.configurator.ConfigDSL with org.eclipse.xtext.common.Terminals

import "http://www.example.org/configurator"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	"model" name=ID label=STRING "{"
		"types" "{"
			(types+=EnumType)*
		"}"
		(children+=ModelChild)*
	"}"
;

EnumType:
	name=ID label=STRING "{"
		(values+=EnumVal)*
	"}"
;

EnumVal:
	name=ID label=STRING
;

ModelChild:
	Product | ProductGroup
;

ProductGroup:
	"group" label=STRING "{"
		(children+=ModelChild)*
	"}"
;

Product:
	"product" name=ID label=STRING "{"
		(children+=ProductChild)*
		("constraints" "{"
			(constraints+=Constraint)*
		"}")?
	"}"
;

ProductChild:
	Param | ParamGroup
;

ParamGroup:
	"group" label=STRING "{"
		(children+=ProductChild)*
	"}"
;

Param:
	PrimParam | EnumParam
;

PrimParam:
	"param" name=ID label=STRING type=PrimitiveType (optional?="optional")?
;

EnumParam:
	"param" name=ID label=STRING type=[EnumType] (optional?= "optional")?
;
 

enum PrimitiveType:
	IntTy = "Int" |
	BoolTy = "Bool" |
	DoubleTy = "Double" |
	TextTy = "Text"
;

Constraint:
	label=STRING expr=Expr
;

Expr:
	IntExpr 
;

IntExpr returns Expr:
	Term ({Plus.left=current} "+" right=Term)*
;

Term returns Expr:
	ConstInt | "(" IntExpr ")"
;

ConstInt:
	value=INT
;

BoolExpr returns Expr:
	ConstBool | {Leq} left=IntExpr "<=" right=IntExpr
;

ConstBool:
	value=BOOL
;

BOOL returns ecore::EBoolean:
	"false" | "true"
;

