/*
 * generated by Xtext 2.10.0
 */
package dk.itu.chomsky.configurator.validation;

import org.eclipse.xtext.validation.Check;
import dk.itu.chomsky.configurator.model.Constraint;
import dk.itu.chomsky.configurator.model.EnumType;
import dk.itu.chomsky.configurator.model.Expr;
import dk.itu.chomsky.configurator.scala.*;

import scala.Option;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class ConfigDSLValidator extends AbstractConfigDSLValidator {
	
	@Check
	void checkConstraint(Constraint constraint) { 
		if (constraint == null || constraint.getExpr() == null)
			return;
		Expr expr = constraint.getExpr();
		Option<ExprTy> ty = Chomsky.checkExpr(expr);
		if (ty.isEmpty()) {
			error("Expression " + Chomsky.genJSExpr(expr) + " did not type-check", constraint, null);
		} else if (!ty.get().equals(TyBool$.MODULE$)) {
			error("Constraint must have a boolean expression", constraint, null);
		}
	}

	@Check
	void checkEmptyTypes(EnumType enumType) { 
		if (enumType == null)
			return;

		Integer count = enumType.getValues().size();

		if (count <= 0) {
			error("Type >" + enumType.getName() + "< must have values", enumType, null);
		}
	}
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					ConfigDSLPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	
}
