
package configurator.chomsky.dsl.itu.dk.configurator5;

import android.content.Context;
import android.graphics.Color;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.InputType;
import android.view.ViewGroup;
import android.view.Gravity;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.view.View;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.FrameLayout;
import android.widget.Toast;
import android.graphics.Typeface;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import configurator5.dk.itu.dsl.chomsky.configurator.configurator.R;

public class MainActivity extends AppCompatActivity {

  // this will be a map from paramName to index in the _objects array
  Map<String, EnumType> types = new HashMap<>();
  Map<String, ParamView> paramViews = new HashMap<>();
  TextView errorView = null;

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    types.put("brand", new EnumType("brand", "Brand", 
        new EnumVal[] { new EnumVal("toyota", "Toyota"),
        new EnumVal("opel", "Opel"),
        new EnumVal("mercedes", "Mercedes"),
        new EnumVal("ellert", "Ellert"),
        new EnumVal("tesla", "Tesla") }));
types.put("drive", new EnumType("drive", "Drive", 
        new EnumVal[] { new EnumVal("twowheel", "2-Wheel Drive"),
        new EnumVal("fourwheel", "4-Wheel Drive") }));
types.put("engine", new EnumType("engine", "Engine", 
        new EnumVal[] { new EnumVal("combustion", "Combustion"),
        new EnumVal("hybrid", "Hybrid"),
        new EnumVal("electrical", "Electrical") }));
types.put("fuel", new EnumType("fuel", "Fuel", 
        new EnumVal[] { new EnumVal("gas", "Gas"),
        new EnumVal("diesel", "Diesel"),
        new EnumVal("electricity", "Electricity") }));
types.put("tires", new EnumType("tires", "Tires", 
        new EnumVal[] { new EnumVal("normal", "Normal tires"),
        new EnumVal("winter", "Winter tires") }));
types.put("company", new EnumType("company", "Company", 
        new EnumVal[] { new EnumVal("alka", "Alka"),
        new EnumVal("topdanmark", "TopDanmark"),
        new EnumVal("tryg", "Tryg") }));

    ScrollView sv = (ScrollView) findViewById(R.id.scrollView1);

    LinearLayout l1 = (LinearLayout) findViewById(R.id.linearLayoutHolder);
    LinearLayout.LayoutParams lp =
      new LinearLayout.LayoutParams(
        LinearLayout.LayoutParams.MATCH_PARENT,
        LinearLayout.LayoutParams.WRAP_CONTENT
      );

    
      l1.addView(newProductHeader("The Car"), lp);
      l1.addView(newParamLabel("Brand"), lp);
l1.addView(newEnumParam("brand", "Brand", types.get("brand")), lp);
l1.addView(newParamLabel("Drive"), lp);
l1.addView(newEnumParam("drive", "Drive", types.get("drive")), lp);
l1.addView(newParamLabel("Automatic Gear"), lp);
l1.addView(newBoolTyParam("autogear", "Automatic Gear"), lp);
l1.addView(newParamLabel("Engine-Type"), lp);
l1.addView(newEnumParam("engine", "Engine-Type", types.get("engine")), lp);
l1.addView(newParamLabel("Fuel-Type"), lp);
l1.addView(newEnumParam("fuel", "Fuel-Type", types.get("fuel")), lp);
l1.addView(newParamLabel("Tire"), lp);
l1.addView(newEnumParam("tires", "Tire", types.get("tires")), lp);

      l1.addView(newGroupHeader("Registration"), lp);
      l1.addView(newParamLabel("License Plate"), lp);
l1.addView(newTextTyParam("plate", "License Plate"), lp);
l1.addView(newParamLabel("Your Name"), lp);
l1.addView(newTextTyParam("name", "Your Name"), lp);
l1.addView(newParamLabel("Average blood-alcohol level"), lp);
l1.addView(newDoubleTyParam("alcohol", "Average blood-alcohol level"), lp);
      
      

      l1.addView(newProductHeader("Insurance"), lp);
      l1.addView(newParamLabel("Company"), lp);
l1.addView(newEnumParam("company", "Company", types.get("company")), lp);
l1.addView(newParamLabel("Insurance Number"), lp);
l1.addView(newIntTyParam("number", "Insurance Number"), lp);
l1.addView(newParamLabel("Your Age"), lp);
l1.addView(newIntTyParam("age", "Your Age"), lp);
      

    errorView = new TextView(this);
    errorView.setTextColor(Color.RED);
    l1.addView(errorView, lp);

    Button submitBtn = new Button(this);
    submitBtn.setText("Submit");

    submitBtn.setOnClickListener(new View.OnClickListener() {
      public void onClick(View v) {
        errorView.setText("");
        checkConstraints();
      }
    });
    l1.addView(submitBtn, lp);
  }

  // UI helper functions

  private TextView newParamLabel(String label) {
    TextView tv = new TextView(this);
    tv.setText(label);
    return tv;
  }

  private TextView newGroupHeader(String name) {
    TextView tv = new TextView(this);
    tv.setTextSize(1.05f * tv.getTextSize());
    tv.setText(name);
    return tv;
  }

  private TextView newProductHeader(String name) {
    TextView tv = new TextView(this);
    tv.setTextSize(1.1f * tv.getTextSize());
    tv.setTypeface(Typeface.defaultFromStyle(Typeface.BOLD));
    tv.setText(name);
    return tv;
  }
  private View newBoolTyParam(String name, String label) {
    CheckBox cb = new CheckBox(this);
    paramViews.put(name, new ParamView(label, cb));
    return cb;
  }

  private View newTextTyParam(String name, String label) {
    EditText et = new EditText(this);
    paramViews.put(name, new ParamView(label, et));
    return et;
  }

  private View newIntTyParam(String name, String label) {
    EditText et = new EditText(this);
    et.setInputType(InputType.TYPE_CLASS_NUMBER);
    et.setText("0");
    paramViews.put(name, new ParamView(label, et));
    return et;
  }

  private View newDoubleTyParam(String name, String label) {
    return newIntTyParam(name, label);
  }

  private View newEnumParam(String name, String label, EnumType type) {
    Spinner spinner = new Spinner(this);
    paramViews.put(name, new ParamView(label, spinner));
    EnumAdapter adapter =
            new EnumAdapter(this, R.layout.support_simple_spinner_dropdown_item, type.values);
    adapter.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);
    spinner.setAdapter(adapter);
    return spinner;
  }

  // runtime-system
  String __prim__value_ref(String valName) {
    return valName;
  }

  boolean __prim__equals(Object a, Object b) {
    return a.equals(b);
  }

  static class ParamRef<T> {
    public final T value;
    public final String label;
    public ParamRef(T value, String label) {
      this.value = value;
      this.label = label;
    }
    T getValue() { return value; }
    String getLabel() { return label; }
  }

  static class ParamView {
    public final String label;
    public final View view;
    public ParamView(String label, View view) {
      this.label = label;
      this.view  = view;
    }
  }

  ParamRef<Integer> __prim__IntTy_param_ref(String name) {
    ParamView pv = paramViews.get(name);
    EditText et = (EditText)pv.view;
    Integer value = Integer.parseInt(et.getText().toString());
    return new ParamRef<Integer>(value, pv.label);
  }

  ParamRef<Double> __prim__DoubleTy_param_ref(String name) {
    ParamView pv = paramViews.get(name);
    EditText et = (EditText)pv.view;
    Double value = Double.parseDouble(et.getText().toString());
    return new ParamRef<Double>(value, pv.label);
  }

  ParamRef<Boolean> __prim__BoolTy_param_ref(String name) {
    ParamView pv = paramViews.get(name);
    CheckBox cb = (CheckBox)pv.view;
    Boolean value = cb.isEnabled();
    return new ParamRef<Boolean>(value, pv.label);
  }

  ParamRef<String> __prim__TextTy_param_ref(String name) {
    ParamView pv = paramViews.get(name);
    EditText et = (EditText)pv.view;
    String value = et.getText().toString();
    return new ParamRef<String>(value, pv.label);
  }

  ParamRef<String> __prim__enum_param_ref(String name) {
    ParamView pv = paramViews.get(name);
    Spinner spinner = (Spinner)pv.view;
    EnumVal value = (EnumVal)spinner.getSelectedItem();
    return new ParamRef<String>(value.getName(), value.getLabel());
  }

  // standard library
  public <T> T __prim__value(ParamRef<T> pref) {
    return pref.value;
  }
  boolean __prim__contains(String input, String query) {
    return input.indexOf(query) > -1;
  }
  String __prim__label(ParamRef pref) {
    return pref.label;
  }



  void checkConstraints() {
    
        if ((!__prim__equals(__prim__value(__prim__enum_param_ref("engine")), __prim__value_ref("electrical")) || __prim__equals(__prim__value(__prim__enum_param_ref("fuel")), __prim__value_ref("electricity"))) == false) {
          errorView.append("Electric engines must use electric fuel\n");
        }
        

        if ((!(__prim__equals(__prim__value(__prim__enum_param_ref("brand")), __prim__value_ref("ellert")) || __prim__equals(__prim__value(__prim__enum_param_ref("brand")), __prim__value_ref("tesla"))) || __prim__equals(__prim__value(__prim__enum_param_ref("engine")), __prim__value_ref("electrical"))) == false) {
          errorView.append("Ellert and Tesla only produce electric cars\n");
        }
        

        if ((__prim__value(__prim__DoubleTy_param_ref("alcohol")) < 0.5) == false) {
          errorView.append("Are you an alcoholic?\n");
        }
        

        if ((__prim__value(__prim__IntTy_param_ref("age")) > 20.0) == false) {
          errorView.append("You must be above 20\n");
        }
        
  }
}

class EnumType {
  public final String name,label;
  public final EnumVal[] values;
  public EnumType(String name, String label, EnumVal[] values) {
    this.name = name;
    this.label = label;
    this.values = values;
  }
}

class EnumVal {
  private final String name;
  private final String label;

  public EnumVal(String name, String label) {
    this.name = name;
    this.label = label;
  }

  public String getLabel() {
    return label;
  }

  public String getName() {
    return name;
  }
}

class EnumAdapter extends ArrayAdapter<EnumVal> {

  private Context context;
  private EnumVal[] values;

  public EnumAdapter(Context context, int textViewResourceId,
                     EnumVal[] values) {
    super(context, textViewResourceId, values);
    this.context = context;
    this.values = values;
  }

  public int getCount() {
    return values.length;
  }

  public EnumVal getItem(int position) {
    return values[position];
  }

  public long getItemId(int position) {
    return position;
  }


  // And the "magic" goes here
  // This is for the "passive" state of the spinner
  @Override
  public View getView(int position, View convertView, ViewGroup parent) {
    TextView label = new TextView(context);
    label.setTextColor(Color.BLACK);
    label.setText(values[position].getLabel());

    return label;
  }

  // And here is when the "chooser" is popped up
  // Normally is the same view, but you can customize it if you want
  @Override
  public View getDropDownView(int position, View convertView,
                              ViewGroup parent) {
    TextView label = new TextView(context);
    label.setTextColor(Color.BLACK);
    label.setText(values[position].getLabel());

    return label;
  }
}
